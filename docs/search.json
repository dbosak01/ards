[{"path":"https://ards.r-sassy.org/articles/ards-example1.html","id":"parallel-ards-example","dir":"Articles","previous_headings":"","what":"Parallel ARDS Example","title":"Example 1: ARDS in Parallel","text":"Let us look example. demonstration, create analysis Demographics table, create ARDS time. diagram parallel approach looks like :  Note following program : input data subset 10 subjects relevant variables make program easier read understand. init_ards() function called top program. values passed rows ARDS. add_ards() function identifies variables analysis dataset want add ARDS. variable values extracted analysis data transformed ARDS structure. add_ards() function can placed middle data pipeline, interfere analysis. add_ards() function called immediately calculations, formatting transformations. function called point ARDS contains original numeric values full precision. analysis complete, get_ards() called retrieve ARDS dataset. ARDS dataset standard R data frame can saved, combined analysis results, passed another program additional processing. point, analysis complete, output report created, ARDS available sharing stakeholders sending downstream processes. Next Steps: Example 2: ARDS Serial","code":"library(dplyr) library(tibble) library(tidyr) library(ards)  # Create input data adsl <- read.table(header = TRUE, text = ' STUDYID DOMAIN  USUBJID SUBJID  SITEID  BRTHDTC AGE AGEU    SEX RACE    ARMCD   ARM ABC DM  ABC-01-049  49  1   11/12/1966  39  YEARS   M   \"WHITE\"     4   \"ARM D\" ABC DM  ABC-01-050  50  1   12/19/1958  47  YEARS   M   \"WHITE\"     2   \"ARM B\" ABC DM  ABC-01-051  51  1   5/2/1972    34  YEARS   M   \"WHITE\"       1 \"ARM A\" ABC DM  ABC-01-052  52  1   6/27/1961   45  YEARS   F   \"WHITE\"     3   \"ARM C\" ABC DM  ABC-01-053  53  1   4/7/1980    26  YEARS   F   \"WHITE\"       2 \"ARM B\" ABC DM  ABC-01-054  54  1   9/13/1962   44  YEARS   M   \"WHITE\"       4 \"ARM D\" ABC DM  ABC-01-055  55  1   6/11/1959   47  YEARS   F   \"BLACK OR AFRICAN AMERICAN\" 3   \"ARM C\" ABC DM  ABC-01-056  56  1   5/2/1975    31  YEARS   M   \"WHITE\"       1 \"ARM A\" ABC DM  ABC-01-113  113 1   2/8/1932    74  YEARS   M   \"WHITE\"       4 \"ARM D\"')  # Create factors for categorical variables # to get zero counts adsl$SEX <- as.factor(adsl$SEX) adsl$RACE <- as.factor(adsl$RACE) adsl$ARM <- factor(adsl$ARM, levels = c(\"ARM A\", \"ARM B\", \"ARM C\", \"ARM D\"))   # Initalize ARDS init_ards(studyid = \"ABC\",           tableid = \"01\", adsns = \"adsl\",           population = \"safety population\",           time = \"SCREENING\", where = \"saffl = TRUE\", reset = TRUE)  # Perform analysis on AGE variable agedf <- adsl |>   select(AGE, ARM) |>   group_by(ARM, .drop = FALSE) |>   summarize(n = n(),             mean = mean(AGE),             std = sd(AGE),             median = median(AGE),             min = min(AGE),             max = max(AGE)) |>   mutate(analvar = \"AGE\") |>   ungroup() |>   add_ards(statvars = c(\"n\", \"mean\", \"std\", \"median\", \"min\", \"max\"),            statdesc = c(\"N\", \"Mean\", \"Std\", \"Median\", \"Min\", \"Max\"),            anal_var = \"AGE\", trtvar = \"ARM\") |>   transmute(analvar, ARM,             n = sprintf(\"%d\", n),             mean_sd = sprintf(\"%.1f (%.2f)\", mean, std),             median = sprintf(\"%.1f\", median),             min_max = sprintf(\"%.1f-%.1f\", min, max)) |>   pivot_longer(c(n, mean_sd, median, min_max),                names_to = \"label\", values_to = \"stats\") |>   pivot_wider(names_from = ARM,               values_from = c(stats)) |>   transmute(analvar, label = c(\"N\", \"Mean (Std)\", \"Median\", \"Min-Max\"),             trtA = `ARM A`, trtB = `ARM B`, trtC = `ARM C`, trtD = `ARM D`)  # View analysis results agedf #   # A tibble: 4 × 6 #   analvar label      trtA        trtB         trtC        trtD         #   <chr>   <chr>      <chr>       <chr>        <chr>       <chr>        # 1 AGE     N          2           2            2           3            # 2 AGE     Mean (Std) 32.5 (2.12) 36.5 (14.85) 46.0 (1.41) 52.3 (18.93) # 3 AGE     Median     32.5        36.5         46.0        44.0         # 4 AGE     Min-Max    31.0-34.0   26.0-47.0    45.0-47.0   39.0-74.0    # Get population counts trt_pop <- count(adsl, ARM) |> deframe()  trt_pop # ARM A ARM B ARM C ARM D  #   2     2     2     3   # Perform analysis on SEX variable sexdf <- adsl |>   mutate(denom = trt_pop[paste0(adsl$ARM)]) |>   group_by(SEX, ARM, denom, .drop = FALSE) |>   summarize(cnt = n()) |>   transmute(SEX, ARM, cnt, analvar = \"SEX\", label = SEX,               pct =  if_else(is.na(denom), 0, cnt / denom * 100)) |>   ungroup() |>   add_ards(statvars = c(\"cnt\", \"pct\"), statdesc = \"label\",            anal_var = \"SEX\", trtvar = \"ARM\") |>   pivot_wider(names_from = ARM,               values_from = c(cnt, pct)) |>   transmute(analvar, label,             trtA = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM A`, `pct_ARM A`),             trtB = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM B`, `pct_ARM B`),             trtC = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM C`, `pct_ARM C`),             trtD = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM D`, `pct_ARM D`))  # View analysis results sexdf # # A tibble: 2 × 6 # analvar label trtA     trtB     trtC     trtD     #   <chr>   <fct> <chr>    <chr>    <chr>    <chr>    # 1 SEX     F     0 (  0%) 1 ( 50%) 2 (100%) 0 (  0%) # 2 SEX     M     2 (100%) 1 ( 50%) 0 (  0%) 3 (100%)  # Perform analysis on RACE racedf <- adsl |>   mutate(denom = trt_pop[paste0(adsl$ARM)]) |>   group_by(RACE, ARM, denom, .drop = FALSE) |>   summarize(cnt = n()) |>   transmute(RACE, ARM, cnt, analvar = \"RACE\", label = RACE,               pct =  if_else(is.na(denom), 0, cnt / denom * 100)) |>   ungroup() |>   add_ards(statvars = c(\"cnt\", \"pct\"), statdesc = \"label\",            anal_var = \"RACE\", trtvar = \"ARM\") |>   pivot_wider(names_from = ARM,               values_from = c(cnt, pct)) |>   transmute(analvar, label,             trtA = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM A`, `pct_ARM A`),             trtB = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM B`, `pct_ARM B`),             trtC = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM C`, `pct_ARM C`),             trtD = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM D`, `pct_ARM D`))  # View analysis results racedf # # A tibble: 2 × 6 # analvar   label                     trtA     trtB     trtC     trtD     #   <chr>   <fct>                     <chr>    <chr>    <chr>    <chr>    # 1 RACE    BLACK OR AFRICAN AMERICAN 0 (  0%) 0 (  0%) 1 ( 50%) 0 (  0%) # 2 RACE    WHITE                     2 (100%) 2 (100%) 1 ( 50%) 3 (100%)  # Combine all analysis into final data frame final <- bind_rows(agedf, sexdf, racedf)  # View final data frame # - This data frame is ready for reporting final # # A tibble: 8 × 6 # analvar   label                     trtA        trtB         trtC        trtD         #   <chr>   <chr>                     <chr>       <chr>        <chr>       <chr>        # 1 AGE     N                         2           2            2           3            # 2 AGE     Mean (Std)                32.5 (2.12) 36.5 (14.85) 46.0 (1.41) 52.3 (18.93) # 3 AGE     Median                    32.5        36.5         46.0        44.0         # 4 AGE     Min-Max                   31.0-34.0   26.0-47.0    45.0-47.0   39.0-74.0    # 5 SEX     F                         0 (  0%)    1 ( 50%)     2 (100%)    0 (  0%)     # 6 SEX     M                         2 (100%)    1 ( 50%)     0 (  0%)    3 (100%)     # 7 RACE    BLACK OR AFRICAN AMERICAN 0 (  0%)    0 (  0%)     1 ( 50%)    0 (  0%)     # 8 RACE    WHITE                     2 (100%)    2 (100%)     1 ( 50%)    3 (100%)     # Extract ARDS # - This data frame can be saved to disc or inserted into a database ards <- get_ards()   # Remove some variables to improve readability ards_reduced <- ards |>    select(trtvar, trtval, anal_var, anal_val,           statname, statval)  # View results ards_reduced #    trtvar trtval anal_var                  anal_val statname    statval # 1     ARM  ARM A      AGE                      <NA>        n   2.000000 # 2     ARM  ARM B      AGE                      <NA>        n   2.000000 # 3     ARM  ARM C      AGE                      <NA>        n   2.000000 # 4     ARM  ARM D      AGE                      <NA>        n   3.000000 # 5     ARM  ARM A      AGE                      <NA>     mean  32.500000 # 6     ARM  ARM B      AGE                      <NA>     mean  36.500000 # 7     ARM  ARM C      AGE                      <NA>     mean  46.000000 # 8     ARM  ARM D      AGE                      <NA>     mean  52.333333 # 9     ARM  ARM A      AGE                      <NA>      std   2.121320 # 10    ARM  ARM B      AGE                      <NA>      std  14.849242 # 11    ARM  ARM C      AGE                      <NA>      std   1.414214 # 12    ARM  ARM D      AGE                      <NA>      std  18.929694 # 13    ARM  ARM A      AGE                      <NA>   median  32.500000 # 14    ARM  ARM B      AGE                      <NA>   median  36.500000 # 15    ARM  ARM C      AGE                      <NA>   median  46.000000 # 16    ARM  ARM D      AGE                      <NA>   median  44.000000 # 17    ARM  ARM A      AGE                      <NA>      min  31.000000 # 18    ARM  ARM B      AGE                      <NA>      min  26.000000 # 19    ARM  ARM C      AGE                      <NA>      min  45.000000 # 20    ARM  ARM D      AGE                      <NA>      min  39.000000 # 21    ARM  ARM A      AGE                      <NA>      max  34.000000 # 22    ARM  ARM B      AGE                      <NA>      max  47.000000 # 23    ARM  ARM C      AGE                      <NA>      max  47.000000 # 24    ARM  ARM D      AGE                      <NA>      max  74.000000 # 25    ARM  ARM A      SEX                         F      cnt   0.000000 # 26    ARM  ARM B      SEX                         F      cnt   1.000000 # 27    ARM  ARM C      SEX                         F      cnt   2.000000 # 28    ARM  ARM D      SEX                         F      cnt   0.000000 # 29    ARM  ARM A      SEX                         M      cnt   2.000000 # 30    ARM  ARM B      SEX                         M      cnt   1.000000 # 31    ARM  ARM C      SEX                         M      cnt   0.000000 # 32    ARM  ARM D      SEX                         M      cnt   3.000000 # 33    ARM  ARM A      SEX                         F      pct   0.000000 # 34    ARM  ARM B      SEX                         F      pct  50.000000 # 35    ARM  ARM C      SEX                         F      pct 100.000000 # 36    ARM  ARM D      SEX                         F      pct   0.000000 # 37    ARM  ARM A      SEX                         M      pct 100.000000 # 38    ARM  ARM B      SEX                         M      pct  50.000000 # 39    ARM  ARM C      SEX                         M      pct   0.000000 # 40    ARM  ARM D      SEX                         M      pct 100.000000 # 41    ARM  ARM A     RACE BLACK OR AFRICAN AMERICAN      cnt   0.000000 # 42    ARM  ARM B     RACE BLACK OR AFRICAN AMERICAN      cnt   0.000000 # 43    ARM  ARM C     RACE BLACK OR AFRICAN AMERICAN      cnt   1.000000 # 44    ARM  ARM D     RACE BLACK OR AFRICAN AMERICAN      cnt   0.000000 # 45    ARM  ARM A     RACE                     WHITE      cnt   2.000000 # 46    ARM  ARM B     RACE                     WHITE      cnt   2.000000 # 47    ARM  ARM C     RACE                     WHITE      cnt   1.000000 # 48    ARM  ARM D     RACE                     WHITE      cnt   3.000000 # 49    ARM  ARM A     RACE BLACK OR AFRICAN AMERICAN      pct   0.000000 # 50    ARM  ARM B     RACE BLACK OR AFRICAN AMERICAN      pct   0.000000 # 51    ARM  ARM C     RACE BLACK OR AFRICAN AMERICAN      pct  50.000000 # 52    ARM  ARM D     RACE BLACK OR AFRICAN AMERICAN      pct   0.000000 # 53    ARM  ARM A     RACE                     WHITE      pct 100.000000 # 54    ARM  ARM B     RACE                     WHITE      pct 100.000000 # 55    ARM  ARM C     RACE                     WHITE      pct  50.000000 # 56    ARM  ARM D     RACE                     WHITE      pct 100.000000"},{"path":"https://ards.r-sassy.org/articles/ards-example2.html","id":"serial-ards-example","dir":"Articles","previous_headings":"","what":"Serial ARDS Example","title":"Example 2: ARDS in Serial","text":"examples, two programs. One program performs analysis saves results ARDS format. next program picks ARDS data, transposes back usable structure, generates report. diagram serial approach looks like :  First, ’ll create program perform analysis. Note following program : data Example 1 used . init_ards() function called top program. call prepare bucket analysis dumped. analysis performed, add_ards() called add analysis ARDS. time, however, additional steps formatting combining data skipped. Instead, ARDS data simply extracted stored. Observe: Notice ARDS dataset exact dataset produced Example 1. program, however, final reporting dataset created. create reporting dataset next program.","code":"library(dplyr) library(tibble) library(tidyr) library(ards)  # Create input data adsl <- read.table(header = TRUE, text = ' STUDYID DOMAIN  USUBJID SUBJID  SITEID  BRTHDTC AGE AGEU    SEX RACE    ARMCD   ARM ABC DM  ABC-01-049  49  1   11/12/1966  39  YEARS   M   \"WHITE\"     4   \"ARM D\" ABC DM  ABC-01-050  50  1   12/19/1958  47  YEARS   M   \"WHITE\"     2   \"ARM B\" ABC DM  ABC-01-051  51  1   5/2/1972    34  YEARS   M   \"WHITE\"       1 \"ARM A\" ABC DM  ABC-01-052  52  1   6/27/1961   45  YEARS   F   \"WHITE\"     3   \"ARM C\" ABC DM  ABC-01-053  53  1   4/7/1980    26  YEARS   F   \"WHITE\"       2 \"ARM B\" ABC DM  ABC-01-054  54  1   9/13/1962   44  YEARS   M   \"WHITE\"       4 \"ARM D\" ABC DM  ABC-01-055  55  1   6/11/1959   47  YEARS   F   \"BLACK OR AFRICAN AMERICAN\" 3   \"ARM C\" ABC DM  ABC-01-056  56  1   5/2/1975    31  YEARS   M   \"WHITE\"       1 \"ARM A\" ABC DM  ABC-01-113  113 1   2/8/1932    74  YEARS   M   \"WHITE\"       4 \"ARM D\"')  # Create factors for categorical variables # to get zero counts adsl$SEX <- as.factor(adsl$SEX) adsl$RACE <- as.factor(adsl$RACE) adsl$ARM <- factor(adsl$ARM, levels = c(\"ARM A\", \"ARM B\", \"ARM C\", \"ARM D\"))   # Initalize ARDS init_ards(studyid = \"ABC\",           tableid = \"01\", adsns = \"adsl\",           population = \"safety population\",           time = \"SCREENING\", where = \"saffl = TRUE\", reset = TRUE)  # Perform analysis on AGE variable agedf <- adsl |>   select(AGE, ARM) |>   group_by(ARM, .drop = FALSE) |>   summarize(n = n(),             mean = mean(AGE),             std = sd(AGE),             median = median(AGE),             min = min(AGE),             max = max(AGE)) |>   mutate(analvar = \"AGE\") |>   ungroup() |>   add_ards(statvars = c(\"n\", \"mean\", \"std\", \"median\", \"min\", \"max\"),            statdesc = c(\"N\", \"Mean\", \"Std\", \"Median\", \"Min\", \"Max\"),            anal_var = \"AGE\", trtvar = \"ARM\")   # View analysis results agedf # # A tibble: 4 × 8 #   ARM       n  mean   std median   min   max analvar #   <fct> <int> <dbl> <dbl>  <dbl> <int> <int> <chr>   # 1 ARM A     2  32.5  2.12   32.5    31    34 AGE     # 2 ARM B     2  36.5 14.8    36.5    26    47 AGE     # 3 ARM C     2  46    1.41   46      45    47 AGE     # 4 ARM D     3  52.3 18.9    44      39    74 AGE      # Get population counts trt_pop <- count(adsl, ARM) |> deframe()  trt_pop # ARM A ARM B ARM C ARM D  #   2     2     2     3   # Perform analysis on SEX variable sexdf <- adsl |>   mutate(denom = trt_pop[paste0(adsl$ARM)]) |>   group_by(SEX, ARM, denom, .drop = FALSE) |>   summarize(cnt = n()) |>   transmute(SEX, ARM, cnt, analvar = \"SEX\", label = SEX,               pct =  if_else(is.na(denom), 0, cnt / denom * 100)) |>   ungroup() |>   add_ards(statvars = c(\"cnt\", \"pct\"), statdesc = \"label\",            anal_var = \"SEX\", trtvar = \"ARM\")   # View analysis results sexdf # # A tibble: 8 × 6 #   SEX   ARM     cnt analvar label   pct #   <fct> <fct> <int> <chr>   <fct> <dbl> # 1 F     ARM A     0 SEX     F         0 # 2 F     ARM B     1 SEX     F        50 # 3 F     ARM C     2 SEX     F       100 # 4 F     ARM D     0 SEX     F         0 # 5 M     ARM A     2 SEX     M       100 # 6 M     ARM B     1 SEX     M        50 # 7 M     ARM C     0 SEX     M         0 # 8 M     ARM D     3 SEX     M       100  # Perform analysis on RACE racedf <- adsl |>   mutate(denom = trt_pop[paste0(adsl$ARM)]) |>   group_by(RACE, ARM, denom, .drop = FALSE) |>   summarize(cnt = n()) |>   transmute(RACE, ARM, cnt, analvar = \"RACE\", label = RACE,               pct =  if_else(is.na(denom), 0, cnt / denom * 100)) |>   ungroup() |>   add_ards(statvars = c(\"cnt\", \"pct\"), statdesc = \"label\",            anal_var = \"RACE\", trtvar = \"ARM\")   # View analysis results racedf # # A tibble: 8 × 6 #   RACE                      ARM     cnt analvar label                       pct #   <fct>                     <fct> <int> <chr>   <fct>                     <dbl> # 1 BLACK OR AFRICAN AMERICAN ARM A     0 RACE    BLACK OR AFRICAN AMERICAN     0 # 2 BLACK OR AFRICAN AMERICAN ARM B     0 RACE    BLACK OR AFRICAN AMERICAN     0 # 3 BLACK OR AFRICAN AMERICAN ARM C     1 RACE    BLACK OR AFRICAN AMERICAN    50 # 4 BLACK OR AFRICAN AMERICAN ARM D     0 RACE    BLACK OR AFRICAN AMERICAN     0 # 5 WHITE                     ARM A     2 RACE    WHITE                       100 # 6 WHITE                     ARM B     2 RACE    WHITE                       100 # 7 WHITE                     ARM C     1 RACE    WHITE                        50 # 8 WHITE                     ARM D     3 RACE    WHITE                       100  # Extract ARDS ards <- get_ards()   # Save ARDS data to file or database here  # Remove some variables to improve readability ards_reduced <- ards |>    select(trtvar, trtval, anal_var, anal_val,           statname, statval)  # View results ards_reduced #    trtvar trtval anal_var                  anal_val statname    statval # 1     ARM  ARM A      AGE                      <NA>        n   2.000000 # 2     ARM  ARM B      AGE                      <NA>        n   2.000000 # 3     ARM  ARM C      AGE                      <NA>        n   2.000000 # 4     ARM  ARM D      AGE                      <NA>        n   3.000000 # 5     ARM  ARM A      AGE                      <NA>     mean  32.500000 # 6     ARM  ARM B      AGE                      <NA>     mean  36.500000 # 7     ARM  ARM C      AGE                      <NA>     mean  46.000000 # 8     ARM  ARM D      AGE                      <NA>     mean  52.333333 # 9     ARM  ARM A      AGE                      <NA>      std   2.121320 # 10    ARM  ARM B      AGE                      <NA>      std  14.849242 # 11    ARM  ARM C      AGE                      <NA>      std   1.414214 # 12    ARM  ARM D      AGE                      <NA>      std  18.929694 # 13    ARM  ARM A      AGE                      <NA>   median  32.500000 # 14    ARM  ARM B      AGE                      <NA>   median  36.500000 # 15    ARM  ARM C      AGE                      <NA>   median  46.000000 # 16    ARM  ARM D      AGE                      <NA>   median  44.000000 # 17    ARM  ARM A      AGE                      <NA>      min  31.000000 # 18    ARM  ARM B      AGE                      <NA>      min  26.000000 # 19    ARM  ARM C      AGE                      <NA>      min  45.000000 # 20    ARM  ARM D      AGE                      <NA>      min  39.000000 # 21    ARM  ARM A      AGE                      <NA>      max  34.000000 # 22    ARM  ARM B      AGE                      <NA>      max  47.000000 # 23    ARM  ARM C      AGE                      <NA>      max  47.000000 # 24    ARM  ARM D      AGE                      <NA>      max  74.000000 # 25    ARM  ARM A      SEX                         F      cnt   0.000000 # 26    ARM  ARM B      SEX                         F      cnt   1.000000 # 27    ARM  ARM C      SEX                         F      cnt   2.000000 # 28    ARM  ARM D      SEX                         F      cnt   0.000000 # 29    ARM  ARM A      SEX                         M      cnt   2.000000 # 30    ARM  ARM B      SEX                         M      cnt   1.000000 # 31    ARM  ARM C      SEX                         M      cnt   0.000000 # 32    ARM  ARM D      SEX                         M      cnt   3.000000 # 33    ARM  ARM A      SEX                         F      pct   0.000000 # 34    ARM  ARM B      SEX                         F      pct  50.000000 # 35    ARM  ARM C      SEX                         F      pct 100.000000 # 36    ARM  ARM D      SEX                         F      pct   0.000000 # 37    ARM  ARM A      SEX                         M      pct 100.000000 # 38    ARM  ARM B      SEX                         M      pct  50.000000 # 39    ARM  ARM C      SEX                         M      pct   0.000000 # 40    ARM  ARM D      SEX                         M      pct 100.000000 # 41    ARM  ARM A     RACE BLACK OR AFRICAN AMERICAN      cnt   0.000000 # 42    ARM  ARM B     RACE BLACK OR AFRICAN AMERICAN      cnt   0.000000 # 43    ARM  ARM C     RACE BLACK OR AFRICAN AMERICAN      cnt   1.000000 # 44    ARM  ARM D     RACE BLACK OR AFRICAN AMERICAN      cnt   0.000000 # 45    ARM  ARM A     RACE                     WHITE      cnt   2.000000 # 46    ARM  ARM B     RACE                     WHITE      cnt   2.000000 # 47    ARM  ARM C     RACE                     WHITE      cnt   1.000000 # 48    ARM  ARM D     RACE                     WHITE      cnt   3.000000 # 49    ARM  ARM A     RACE BLACK OR AFRICAN AMERICAN      pct   0.000000 # 50    ARM  ARM B     RACE BLACK OR AFRICAN AMERICAN      pct   0.000000 # 51    ARM  ARM C     RACE BLACK OR AFRICAN AMERICAN      pct  50.000000 # 52    ARM  ARM D     RACE BLACK OR AFRICAN AMERICAN      pct   0.000000 # 53    ARM  ARM A     RACE                     WHITE      pct 100.000000 # 54    ARM  ARM B     RACE                     WHITE      pct 100.000000 # 55    ARM  ARM C     RACE                     WHITE      pct  50.000000 # 56    ARM  ARM D     RACE                     WHITE      pct 100.000000"},{"path":"https://ards.r-sassy.org/articles/ards-example2.html","id":"reporting-from-ards","dir":"Articles","previous_headings":"","what":"Reporting from ARDS","title":"Example 2: ARDS in Serial","text":"next program pick ARDS dataset analysis program, produce final data frame reporting. Note following program: first step convert ARDS data back wide form, using restore_ards() function. Subsequent steps format combine restored data create analysis blocks. analysis blocks combined single final data frame. point, data can fed reporting package choice. code: somewhat complicated, serial ARDS approach provides flexibility. desired, create additional programs intext tables, figures, uploads ClinicalTrials.gov. outputs can created ARDS dataset. Next Steps: Frequently Asked Questions","code":"# Extract ARDS data from file or database here  # Restore to wide format res <- restore_ards(ards)  # View results res # $AGE #     ARM anal_var n     mean       std median min max # 1 ARM A      AGE 2 32.50000  2.121320   32.5  31  34 # 2 ARM B      AGE 2 36.50000 14.849242   36.5  26  47 # 3 ARM C      AGE 2 46.00000  1.414214   46.0  45  47 # 4 ARM D      AGE 3 52.33333 18.929694   44.0  39  74 #  # $SEX #     ARM anal_var SEX cnt pct # 1 ARM A      SEX   F   0   0 # 2 ARM B      SEX   F   1  50 # 3 ARM C      SEX   F   2 100 # 4 ARM D      SEX   F   0   0 # 5 ARM A      SEX   M   2 100 # 6 ARM B      SEX   M   1  50 # 7 ARM C      SEX   M   0   0 # 8 ARM D      SEX   M   3 100 #  # $RACE #     ARM anal_var                      RACE cnt pct # 1 ARM A     RACE BLACK OR AFRICAN AMERICAN   0   0 # 2 ARM B     RACE BLACK OR AFRICAN AMERICAN   0   0 # 3 ARM C     RACE BLACK OR AFRICAN AMERICAN   1  50 # 4 ARM D     RACE BLACK OR AFRICAN AMERICAN   0   0 # 5 ARM A     RACE                     WHITE   2 100 # 6 ARM B     RACE                     WHITE   2 100 # 7 ARM C     RACE                     WHITE   1  50 # 8 ARM D     RACE                     WHITE   3 100  # Perform formatting on AGE analysis agedf <- res$AGE |>   transmute(anal_var, ARM,             n = sprintf(\"%d\", n),             mean_sd = sprintf(\"%.1f (%.2f)\", mean, std),             median = sprintf(\"%.1f\", median),             min_max = sprintf(\"%.1f-%.1f\", min, max)) |>   pivot_longer(c(n, mean_sd, median, min_max),                names_to = \"label\", values_to = \"stats\") |>   pivot_wider(names_from = ARM,               values_from = c(stats)) |>   transmute(anal_var, label = c(\"N\", \"Mean (Std)\", \"Median\", \"Min-Max\"),             trtA = `ARM A`, trtB = `ARM B`, trtC = `ARM C`, trtD = `ARM D`)  # View analysis results agedf # # A tibble: 4 × 6 #   anal_var label      trtA        trtB         trtC        trtD         #   <chr>    <chr>      <chr>       <chr>        <chr>       <chr>        # 1 AGE      N          2           2            2           3            # 2 AGE      Mean (Std) 32.5 (2.12) 36.5 (14.85) 46.0 (1.41) 52.3 (18.93) # 3 AGE      Median     32.5        36.5         46.0        44.0         # 4 AGE      Min-Max    31.0-34.0   26.0-47.0    45.0-47.0   39.0-74.0    # Perform formatting on SEX analysis sexdf <- res$SEX |>   pivot_wider(names_from = ARM,               values_from = c(cnt, pct)) |>   transmute(anal_var, label = SEX,             trtA = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM A`, `pct_ARM A`),             trtB = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM B`, `pct_ARM B`),             trtC = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM C`, `pct_ARM C`),             trtD = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM D`, `pct_ARM D`))   # View analysis results sexdf # # A tibble: 2 × 6 # analvar label trtA     trtB     trtC     trtD     #   <chr>   <fct> <chr>    <chr>    <chr>    <chr>    # 1 SEX     F     0 (  0%) 1 ( 50%) 2 (100%) 0 (  0%) # 2 SEX     M     2 (100%) 1 ( 50%) 0 (  0%) 3 (100%)   # Perform formatting on RACE analysis racedf <- res$RACE |>   pivot_wider(names_from = ARM,               values_from = c(cnt, pct)) |>   transmute(anal_var, label = RACE,             trtA = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM A`, `pct_ARM A`),             trtB = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM B`, `pct_ARM B`),             trtC = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM C`, `pct_ARM C`),             trtD = sprintf(\"%1d (%3.0f%%)\", `cnt_ARM D`, `pct_ARM D`))  # View analysis results racedf # # A tibble: 2 × 6 #   anal_var RACE                      trtA     trtB     trtC     trtD     #   <chr>    <chr>                     <chr>    <chr>    <chr>    <chr>    # 1 RACE     BLACK OR AFRICAN AMERICAN 0 (  0%) 0 (  0%) 1 ( 50%) 0 (  0%) # 2 RACE     WHITE                     2 (100%) 2 (100%) 1 ( 50%) 3 (100%)  # Combine all analysis into final data frame final <- bind_rows(agedf, sexdf, racedf)   # View final data frame # - This data frame is ready reporting final # # A tibble: 8 × 6 #   anal_var label                     trtA        trtB         trtC        trtD         #   <chr>    <chr>                     <chr>       <chr>        <chr>       <chr>        # 1 AGE      N                         2           2            2           3            # 2 AGE      Mean (Std)                32.5 (2.12) 36.5 (14.85) 46.0 (1.41) 52.3 (18.93) # 3 AGE      Median                    32.5        36.5         46.0        44.0         # 4 AGE      Min-Max                   31.0-34.0   26.0-47.0    45.0-47.0   39.0-74.0    # 5 SEX      F                         0 (  0%)    1 ( 50%)     2 (100%)    0 (  0%)     # 6 SEX      M                         2 (100%)    1 ( 50%)     0 (  0%)    3 (100%)     # 7 RACE     BLACK OR AFRICAN AMERICAN 0 (  0%)    0 (  0%)     1 ( 50%)    0 (  0%)     # 8 RACE     WHITE                     2 (100%)    2 (100%)     1 ( 50%)    3 (100%)   # Perform reporting here"},{"path":"https://ards.r-sassy.org/articles/ards-faq.html","id":"top","dir":"Articles","previous_headings":"","what":"Index","title":"Frequently Asked Questions","text":"ards package? write ards package? difference ards cards package?","code":""},{"path":[]},{"path":"https://ards.r-sassy.org/articles/ards-faq.html","id":"ards","dir":"Articles","previous_headings":"Content","what":"What is the ards package?","title":"Frequently Asked Questions","text":"Q: don’t quite understand concept ards package. trying ? : ards package helps create Analysis Results Dataset (ARD) based CDISC recommended structure. functions takes existing statistics, transposes vertical format, collects single dataset. dataset can saved, shared sponsors, used produce number outputs. ards package simply facilitates workflow. top","code":""},{"path":"https://ards.r-sassy.org/articles/ards-faq.html","id":"why","dir":"Articles","previous_headings":"Content","what":"Why did you write the ards package?","title":"Frequently Asked Questions","text":"Q: several packages create ARDS dataset. write one? : ards package actually first R package output CDISC ARDS structure. time written, early 2023, public, ARDS-related packages. ards package filled need time, still addresses use cases supported packages. top","code":""},{"path":"https://ards.r-sassy.org/articles/ards-faq.html","id":"cards","dir":"Articles","previous_headings":"Content","what":"What is the difference between ards and the cards package?","title":"Frequently Asked Questions","text":"Q: see lot people using cards package, also produces ARDS dataset. difference ards cards? : ards package produce statistics, cards package . ards package assumes know produce statistics want, merely re-organizes ARDS structure. cards package produces statistics, outputs ARDS structure. packages different use cases. consider requirements select package appropriate situation. top","code":""},{"path":"https://ards.r-sassy.org/articles/ards.html","id":"ards-structure","dir":"Articles","previous_headings":"","what":"ARDS Structure","title":"ards","text":"data structure produced ards package structure recommended CDISC. structure puts analysis values single column. Therefore, one row per analysis value. Descriptive information, name analysis variable groups, stored columns. data dictionary ARDS dataset:","code":""},{"path":"https://ards.r-sassy.org/articles/ards.html","id":"how-to-use-ards","dir":"Articles","previous_headings":"","what":"How to Use ards","title":"ards","text":"see ards functions work, let us first perform simple analysis mtcars sample data frame. Examine following example: image ARDS dataset created :","code":"library(dplyr) library(ards)  # Initialize the ARDS # - These values will be repeated on all rows in the ARDS dataset init_ards(studyid = \"MTCARS\",           tableid = \"01\", adsns = \"mtcars\",           population = \"all cars\",           time = \"1973\")  # Perform analysis on MPG # - Using cylinders as a by group analdf <- mtcars |>    select(cyl, mpg) |>    group_by(cyl) |>    summarize(n = n(),             mean = mean(mpg),             std = sd(mpg),             min = min(mpg),             max = max(mpg))  # View analysis data analdf #     cyl     n  mean   std   min   max #   <dbl> <int> <dbl> <dbl> <dbl> <dbl> # 1     4    11  26.7  4.51  21.4  33.9 # 2     6     7  19.7  1.45  17.8  21.4 # 3     8    14  15.1  2.56  10.4  19.2  # Add analysis data to ARDS # - These values will be unique for each row in the ARDS dataset add_ards(analdf,           statvars = c(\"n\", \"mean\", \"std\", \"min\", \"max\"),          anal_var = \"mpg\", trtvar = \"cyl\")                     # Get the ARDS # - Remove by-variables to make the ARDS dataset easier to read ards <- get_ards() |> select(-starts_with(\"by\"))  # Uncomment to view ards # View(ards)"},{"path":"https://ards.r-sassy.org/articles/ards.html","id":"restoring-an-ards-dataset","dir":"Articles","previous_headings":"","what":"Restoring an ARDS Dataset","title":"ards","text":"ARDS dataset structure useful storage sharing analysis results. , however, useful reporting. statistics single column actually makes reporting quite difficult. perform reporting, necessary put statistics back separate columns. “widening” ARDS dataset can performed restore_ards() function. restore_ards() function accepts ARDS dataset return list transposed data frames. list contain one data frame analysis variable. columns data frame may different depending statistics requested. Let’s pick last example, just restore result get_ards(): Notice analysis data restored, statistics put back columns. data now ready reporting.","code":"# Restore to wide format res <- restore_ards(ards)  # View results res # $mpg #   cyl anal_var  n     mean      std  min  max # 1   4      mpg 11 26.66364 4.509828 21.4 33.9 # 2   6      mpg  7 19.74286 1.453567 17.8 21.4 # 3   8      mpg 14 15.10000 2.560048 10.4 19.2"},{"path":"https://ards.r-sassy.org/articles/ards.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"ards","text":"demonstrations ards package action, see following: Example 1: ARDS ParallelExample 2: ARDS Serial","code":""},{"path":"https://ards.r-sassy.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Bosak. Author, maintainer. Kevin Kramer. Contributor. Jack Fuller. Contributor. Matt Baldwin. Contributor.","code":""},{"path":"https://ards.r-sassy.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bosak D (2025). ards: Creates Analysis Results Datasets. R package version 0.1.3, https://ards.r-sassy.org.","code":"@Manual{,   title = {ards: Creates Analysis Results Datasets},   author = {David Bosak},   year = {2025},   note = {R package version 0.1.3},   url = {https://ards.r-sassy.org}, }"},{"path":"https://ards.r-sassy.org/index.html","id":"introduction-to-ards","dir":"","previous_headings":"","what":"Creates Analysis Results Datasets","title":"Creates Analysis Results Datasets","text":"Analysis Results Dataset (ARDS) commonly used pharma-biotech industry capture results analysis tabular data structure. ards package helps create ARDS. ards functions can called inside report program data preparation program. functions use “bucketing” approach, whereby data can added ARDS multiple calls multiple intermediate data sets.","code":""},{"path":"https://ards.r-sassy.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Creates Analysis Results Datasets","text":"ards package can installed console. Simply run following command: want latest development version, can install directly github: put following line top program script: ards package give access number functions help create Analysis Results Dataset (ARDS). examples usage information, visit ards documentation site .","code":"install.packages(\"ards\") devtools::install_github(\"https://github.com/dbosak01/ards\") library(ards)"},{"path":"https://ards.r-sassy.org/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Creates Analysis Results Datasets","text":"need help, first place turn ards web site. web site full documentation ards functions. want look code ards package, visit github page . encounter bug feature request, please submit issue .","code":""},{"path":"https://ards.r-sassy.org/index.html","id":"see-also","dir":"","previous_headings":"","what":"See Also","title":"Creates Analysis Results Datasets","text":"sassy meta-package includes several packages help make R easier everyone. can read sassy package .","code":""},{"path":"https://ards.r-sassy.org/reference/add_ards.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds data to an Analysis Results Dataset — add_ards","title":"Adds data to an Analysis Results Dataset — add_ards","text":"add_ards function dumps data input analysis dataset ARDS dataset.  function designed pipe-friendly, return input dataset unaltered.  parameters function define extract desired data analysis dataset. \"statvars\" parameter defines columns contain desired analysis results.  values columns used populate \"statval\" variable output dataset.  parameters used define identifying information statistics values, optional. add_ards function called immediately calculations, analysis results still numeric form.  recommendation ensure ARDS contain full precision analysis values.  analysis values dumped ARDS, may proceed transform format analysis data, without affecting values captured ARDS.","code":""},{"path":"https://ards.r-sassy.org/reference/add_ards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds data to an Analysis Results Dataset — add_ards","text":"","code":"add_ards(   data,   statvars,   statdesc = NULL,   byvars = NULL,   trtvar = NULL,   paramcd = NULL,   anal_var = NULL,   anal_val = NULL )"},{"path":"https://ards.r-sassy.org/reference/add_ards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds data to an Analysis Results Dataset — add_ards","text":"data input data create analysis results .  parameter required. statvars vector column names identify desired results. Statvar columns must numeric.  parameter required. statdesc vector values column name identifies description statvar. passed vector values, number values correspond number 'statvar' variables. byvars vector column names use variables. trtvar column name use treatment variable. paramcd character string describes analysis parameter code column name contains parameter code. supplied column name, function populate 'paramcd' column ARDS value 'paramcd' column. anal_var column name analysis variable string identifies analysis variable. anal_val analysis variable value.  Can identified column name vector values. default, analysis values taken values variable passed 'anal_var'.  parameter exists may pass values different variable, desired.","code":""},{"path":"https://ards.r-sassy.org/reference/add_ards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds data to an Analysis Results Dataset — add_ards","text":"input data frame, unaltered.","code":""},{"path":[]},{"path":"https://ards.r-sassy.org/reference/add_ards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds data to an Analysis Results Dataset — add_ards","text":"","code":"library(ards) library(dplyr)  # Initialize the ARDS init_ards(studyid = \"MTCARS\",           tableid = \"01\", adsns = \"mtcars\",           population = \"all cars\",           time = \"1973\")  # Perform analysis on MPG # - Add to ARDS from within continuous variable pipeline mpgdf <- mtcars |>    select(cyl, mpg) |>    group_by(cyl) |>    summarize(n = n(),             mean = mean(mpg),             std = sd(mpg),             min = min(mpg),             max = max(mpg)) |>    add_ards(statvars = c(\"n\", \"mean\", \"std\", \"min\", \"max\"),          anal_var = \"mpg\", trtvar = \"cyl\")              # Perform analysis on GEAR # - Add to ARDS from within categorical variable pipeline geardf <- mtcars |>    mutate(denom = n()) |>    select(cyl, gear, denom) |>    group_by(cyl, gear) |>    summarize(cnt = n(),              denom = max(denom)) |>   mutate(pct = cnt / denom * 100) |>    add_ards(statvars = c(\"cnt\", \"pct\", \"denom\"),          anal_var = \"gear\", trtvar = \"cyl\")  # Get the ARDS ards <- get_ards()   # Uncomment to view ards # View(ards)"},{"path":"https://ards.r-sassy.org/reference/ards.html","id":null,"dir":"Reference","previous_headings":"","what":"ards: A package for creating Analysis Results Datasets — ards","title":"ards: A package for creating Analysis Results Datasets — ards","text":"Analysis Results Dataset (ARDS) commonly used pharma-biotech industry capture results analysis tabular data structure.  ards package helps create ARDS. ards functions can called inside report program data preparation program.  functions use \"bucketing\" approach, whereby data can added ARDS multiple calls multiple intermediate data sets.","code":""},{"path":"https://ards.r-sassy.org/reference/ards.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ards: A package for creating Analysis Results Datasets — ards","text":"ards package allows easily create ARDS dataset standard clinical reporting data preparation program.  ards package contains three functions, used create ARDS dataset.  functions called following order, described purpose: init_ards: Initialize ARDS dataset add_ards: Add data ARDS dataset get_ards: Extract completed ARDS Click links information function. following figure describes structure ARDS dataset.  structure recommended CDISC.","code":""},{"path":[]},{"path":"https://ards.r-sassy.org/reference/ards.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ards: A package for creating Analysis Results Datasets — ards","text":"Maintainer: David Bosak dbosak01@gmail.com contributors: Kevin Kramer kkrame02@amgen.com [contributor] Jack Fuller jacfulle@amgen.com [contributor] Matt Baldwin mbaldw01@amgen.com [contributor]","code":""},{"path":"https://ards.r-sassy.org/reference/get_ards.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the current Analysis Results Dataset — get_ards","title":"Returns the current Analysis Results Dataset — get_ards","text":"get_ards function returns current state Analysis Results Dataset (ARDS) R data frame. data frame may saved disk, saved database, examined code.  function takes parameters.","code":""},{"path":"https://ards.r-sassy.org/reference/get_ards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the current Analysis Results Dataset — get_ards","text":"","code":"get_ards()"},{"path":"https://ards.r-sassy.org/reference/get_ards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the current Analysis Results Dataset — get_ards","text":"data frame current analysis results.","code":""},{"path":[]},{"path":"https://ards.r-sassy.org/reference/get_ards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the current Analysis Results Dataset — get_ards","text":"","code":"library(ards) library(dplyr)  # Initialize the ARDS # - These values will be common through the dataset init_ards(studyid = \"IRIS\",           tableid = \"01\", adsns = \"iris\",           population = \"all flowers\",           time = \"1973\")  # Perform analysis on Petal.Length # - Using Species as a by-group analdf1 <- iris |>    select(Petal.Length, Species) |>    group_by(Species) |>    summarize(n = n(),             mean = mean(Petal.Length),             std = sd(Petal.Length),             min = min(Petal.Length),             max = max(Petal.Length)) |>    add_ards(statvars = c(\"n\", \"mean\", \"std\", \"min\", \"max\"),            statdesc = c(\"Count\", \"Mean\", \"STD\", \"Minimum\", \"Maximum\"),            anal_var = \"Petal.Length\", trtvar = \"Species\")             # Perform analysis on Petal.Width # - Using Species as a by-group analdf2 <- iris |>    select(Petal.Width, Species) |>    group_by(Species) |>    summarize(n = n(),             mean = mean(Petal.Width),             std = sd(Petal.Width),             min = min(Petal.Width),             max = max(Petal.Width)) |>    add_ards(statvars = c(\"n\", \"mean\", \"std\", \"min\", \"max\"),            statdesc = c(\"Count\", \"Mean\", \"STD\", \"Minimum\", \"Maximum\"),            anal_var = \"Petal.Width\", trtvar = \"Species\")  # Get the ARDS ards <- get_ards()   # Uncomment to view ards # View(ards)"},{"path":"https://ards.r-sassy.org/reference/init_ards.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the Analysis Results Dataset — init_ards","title":"Initialize the Analysis Results Dataset — init_ards","text":"function initialize Analysis Results Dataset (ARDS). function first create data template desired structure, populate common values across dataset template. common values repeated row analysis data frame subsequent inserts add_ards function.","code":""},{"path":"https://ards.r-sassy.org/reference/init_ards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the Analysis Results Dataset — init_ards","text":"","code":"init_ards(   studyid = NA,   tableid = NA,   adsns = NA,   population = NA,   time = NA,   where = NA,   reset = TRUE )"},{"path":"https://ards.r-sassy.org/reference/init_ards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the Analysis Results Dataset — init_ards","text":"studyid study analysis performed. parameter optional. tableid table identifier use results. value identifies table within study.  Optional string value. adsns vector source dataset names.  parameter used identify input data analysis.  parameter optional. population description analysis population.  parameter used identify population analysis.  parameter optional. time optional description time frame used analysis.  example, clinical study, \"time\" value may identify visit analysis based. optional description criteria used subset data analysis. reset true, clears existing ARDS dataset replaces empty template.  Otherwise, just assign new parameter values existing template.  default value TRUE, meaning ARDS memory cleared every time init_ards called.  wish assign new initialization values, keep appending existing ARDS dataset, set parameter FALSE. feature used creating two different tables program.","code":""},{"path":"https://ards.r-sassy.org/reference/init_ards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the Analysis Results Dataset — init_ards","text":"initialized analysis dataset.","code":""},{"path":[]},{"path":"https://ards.r-sassy.org/reference/init_ards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize the Analysis Results Dataset — init_ards","text":"","code":"library(ards) library(dplyr)  # Initialize the ARDS # - These values will be common through the dataset init_ards(studyid = \"MTCARS\",           tableid = \"01\", adsns = \"mtcars\",           population = \"all cars\",           time = \"1973\")  # Perform analysis on MPG # - Using cylinders as a by-group analdf <- mtcars |>    select(cyl, mpg) |>    group_by(cyl) |>    summarize(n = n(),             mean = mean(mpg),             std = sd(mpg),             min = min(mpg),             max = max(mpg))  # View analysis data analdf #     cyl     n  mean   std   min   max #   <dbl> <int> <dbl> <dbl> <dbl> <dbl> # 1     4    11  26.7  4.51  21.4  33.9 # 2     6     7  19.7  1.45  17.8  21.4 # 3     8    14  15.1  2.56  10.4  19.2  # Add analysis data to ARDS # - These values will be unique per row add_ards(analdf,           statvars = c(\"n\", \"mean\", \"std\", \"min\", \"max\"),          anal_var = \"mpg\", trtvar = \"cyl\")   # Get the ARDS ards <- get_ards()   # Uncomment to view ards # View(ards)"},{"path":"https://ards.r-sassy.org/reference/restore_ards.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore an ARDS dataset — restore_ards","title":"Restore an ARDS dataset — restore_ards","text":"restore_ards function restores ARDS data wide format. wide data can used reporting.","code":""},{"path":"https://ards.r-sassy.org/reference/restore_ards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore an ARDS dataset — restore_ards","text":"","code":"restore_ards(data, init_vars = FALSE, anal_var = \"anal_var\")"},{"path":"https://ards.r-sassy.org/reference/restore_ards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore an ARDS dataset — restore_ards","text":"data input dataset restore.  input dataset correspond CDISC ARDS structure, created get_ards. However, variables required.  required variables \"anal_var\", \"statname\", \"statval\".  variables process available, ignored otherwise. init_vars Whether keep initialization variables restored data frames.  Default FALSE. initialization variables include \"studyid\", \"tableid\", \"adsns\", \"population\", \"time\", \"\". keep variables restored data frames, set init_vars TRUE. anal_var name use analysis variable column. Default \"anal_var\". need different name column, pass name quoted string .  eliminate column entirely, pass NULL parameter.","code":""},{"path":"https://ards.r-sassy.org/reference/restore_ards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restore an ARDS dataset — restore_ards","text":"list data frames, transposed back wide format.  list one items, distinguished analysis variable. list item name correspond name analysis variable.","code":""},{"path":"https://ards.r-sassy.org/reference/restore_ards.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Restore an ARDS dataset — restore_ards","text":"init_ards, add_ards, get_ards functions take data wide format, convert narrow format.  restore_ards function converts narrow ARDS data back wide format. Wide format means column statistic.  Narrow format means statistics single column. analysis variable can number statistics, converting narrow wide, resulting data frames can different numbers colums different column names.  Therefore, restore_ards function returns list data frames, one analysis variable. data frame, statistics separate column, named according original statistic variable name.  label statistics columns statistic description. default, columns populated init_ards returned. columns can returned setting \"init_vars\" parameter TRUE. ARDS data restored statistics back separate columns, easy create report, figure, output.","code":""},{"path":[]},{"path":"https://ards.r-sassy.org/reference/restore_ards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restore an ARDS dataset — restore_ards","text":"","code":"library(ards) library(dplyr)  # Initialize the ARDS # - These values will be common through the dataset init_ards(studyid = \"IRIS\",           tableid = \"01\", adsns = \"iris\",           population = \"all flowers\",           time = \"1973\")  # Perform analysis on Petal.Length # - Using Species as a by-group analdf1 <- iris |>    select(Petal.Length, Species) |>    group_by(Species) |>    summarize(n = n(),             mean = mean(Petal.Length),             std = sd(Petal.Length),             min = min(Petal.Length),             max = max(Petal.Length)) |>    add_ards(statvars = c(\"n\", \"mean\", \"std\", \"min\", \"max\"),            statdesc = c(\"Count\", \"Mean\", \"STD\", \"Minimum\", \"Maximum\"),            anal_var = \"Petal.Length\", trtvar = \"Species\")             # Perform analysis on Petal.Width # - Using Species as a by-group analdf2 <- iris |>    select(Petal.Width, Species) |>    group_by(Species) |>    summarize(n = n(),             mean = mean(Petal.Width),             std = sd(Petal.Width),             min = min(Petal.Width),             max = max(Petal.Width)) |>    add_ards(statvars = c(\"n\", \"mean\", \"std\", \"min\", \"max\"),            statdesc = c(\"Count\", \"Mean\", \"STD\", \"Minimum\", \"Maximum\"),            anal_var = \"Petal.Width\", trtvar = \"Species\")  # Get the ARDS ards <- get_ards()   # Convert back to wide format res <- restore_ards(ards)  # View list names print(names(res)) # [1] \"Petal.Length\" \"Petal.Width\"   # Pull out Petal.Length r1 <- res$Petal.Length  # View column names on Petal.Length print(names(r1)) # [1] \"Species\"  \"anal_var\" \"n\"        \"mean\"     \"std\"      \"min\"      \"max\"      # View stat data on Petal.Length print(r1) #      Species     anal_var  n  mean       std min max # 1     setosa Petal.Length 50 1.462 0.1736640 1.0 1.9 # 2 versicolor Petal.Length 50 4.260 0.4699110 3.0 5.1 # 3  virginica Petal.Length 50 5.552 0.5518947 4.5 6.9  # Uncomment to view restored datasets # View(res$Petal.Length) # View(res$Petal.Width)"},{"path":"https://ards.r-sassy.org/news/index.html","id":"ards-013","dir":"Changelog","previous_headings":"","what":"ards 0.1.3","title":"ards 0.1.3","text":"Added restore_ards() function convert back wide format. Removed factors add_ards() avoid problems stacking data different analysis variables. Added “factors” attribute ARDS dataset capture columns factors added. information used restore_ards() re-apply factors transposed data.","code":""},{"path":"https://ards.r-sassy.org/news/index.html","id":"ards-012","dir":"Changelog","previous_headings":"","what":"ards 0.1.2","title":"ards 0.1.2","text":"CRAN release: 2025-09-12 Bug fix byvars parameter add_ards(). Documentation fixes.","code":""},{"path":"https://ards.r-sassy.org/news/index.html","id":"ards-011","dir":"Changelog","previous_headings":"","what":"ards 0.1.1","title":"ards 0.1.1","text":"CRAN release: 2023-03-21 Initial version. Add init_ards(), add_ards(), get_ards() functions. Wrote documentation created pkgdown site. Added NEWS.md file track changes package.","code":""}]
